plugins {
    id("kotlin")
    id("application")
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("org.jetbrains.kotlin.plugin.serialization") version "$kotlin_version"
}

version = rootProject.version

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileKotlin.kotlinOptions.jvmTarget = "17"
compileTestKotlin.kotlinOptions.jvmTarget = "17"

sourceSets.main.java.srcDirs = ["src/main/kotlin"]

dependencies {
    // Core language libraries
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")

    // LibEuFin util library
    implementation(project(":util"))

    // XML parsing/binding and encryption
    implementation("javax.xml.bind:jaxb-api:2.3.0")
    implementation("org.glassfish.jaxb:jaxb-runtime:2.3.1")
    implementation("org.apache.santuario:xmlsec:2.2.2")

    // Compression
    implementation("org.apache.commons:commons-compress:1.21")

    // Command line parsing
    implementation("com.github.ajalt.clikt:clikt:$clikt_version")
    implementation("org.postgresql:postgresql:$postgres_version")
    implementation("com.zaxxer:HikariCP:5.0.1")
    // Ktor client library
    implementation("io.ktor:ktor-client-apache:$ktor_version")

    // Brings the call-logging library too.
    implementation("io.ktor:ktor-server-test-host:$ktor_version")

    // PDF generation
    implementation("com.itextpdf:itext7-core:7.1.16")

    // UNIX domain sockets support (used to connect to PostgreSQL)
    implementation("com.kohlschutter.junixsocket:junixsocket-core:2.8.1")

    // Serialization
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$json_version")

    // Unit testing
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
    testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
    testImplementation("io.ktor:ktor-client-mock:$ktor_version")
}

test {
    failFast = true
    testLogging.showStandardStreams = false
}

application {
    mainClassName = "tech.libeufin.nexus.MainKt"
    applicationName = "libeufin-nexus"
    applicationDefaultJvmArgs = ['-Djava.net.preferIPv6Addresses=true']
}

run {
    standardInput = System.in
}